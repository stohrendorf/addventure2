<?php
namespace addventure;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-06-02 at 00:08:44.
 */
class UserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new User;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers addventure\User::getId
     * @covers addventure\User::setId
     */
    public function testGetAndSetId()
    {
        $this->object->setId(123);
        $this->assertEquals(123, $this->object->getId());
    }

    /**
     * @covers addventure\User::getEmail
     * @covers addventure\User::setEmail
     */
    public function testGetAndSetEmail()
    {
        $this->object->setEmail('user@example.com');
        $this->assertEquals('user@example.com', $this->object->getEmail());
        
        $this->object->setEmail(' user.space@example.com  ');
        $this->assertEquals('user.space@example.com', $this->object->getEmail());

        try {
            $this->object->setEmail('invalid@mail');
            $this->fail();
        }
        catch(\InvalidArgumentException $ex) {
        }
        
        try {
            $this->object->setEmail(null);
            $this->fail();
        }
        catch(\InvalidArgumentException $ex) {
        }
    }

    /**
     * @covers addventure\User::getUsername
     * @covers addventure\User::setUsername
     */
    public function testGetAndSetUsername()
    {
        $this->object->setUsername('John Doe');
        $this->assertEquals('John Doe', $this->object->getUsername());
        
        $this->object->setUsername('Johnny     Doe  ');
        $this->assertEquals('Johnny Doe', $this->object->getUsername());

        $this->object->setUsername(' Anna' . str_repeat(' ', 500));
        $this->assertEquals($this->object->getUsername(), 'Anna');

        try {
            $this->object->setUsername(null);
            $this->fail();
        } catch (\InvalidArgumentException $ex) {
        }
        
        // test UTF-8 length
        try {
            // ä * 100 is OK
            $this->object->setUsername(str_repeat("\xC3\xA4",100));
        } catch (\InvalidArgumentException $ex) {
            $this->fail('UTF-8 encoding length (1)');
        }
        try {
            // ä * 101 is not OK
            $this->object->setUsername(str_repeat("\xC3\xA4",101));
            $this->fail('UTF-8 encoding length (2)');
        } catch (\InvalidArgumentException $ex) {
        }
    }

    /**
     * @covers addventure\User::getRole
     * @covers addventure\User::setRole
     */
    public function testGetAndSetRole()
    {
        $this->object->setRole(0);
        $this->assertEquals(UserRole::Anonymous, (int)$this->object->getRole());
        $this->object->setRole(1);
        $this->assertEquals(UserRole::AwaitApproval, (int)$this->object->getRole());
        $this->object->setRole('Registered');
        $this->assertEquals(UserRole::Registered, (int)$this->object->getRole());
        $this->object->setRole(UserRole::Moderator);
        $this->assertEquals(UserRole::Moderator, (int)$this->object->getRole());
    }

    /**
     * @covers addventure\User::getAuthorNames
     * @todo   Implement testGetAuthorNames().
     */
    public function testGetAuthorNames()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::getPassword
     * @todo   Implement testGetPassword().
     */
    public function testGetPassword()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::getBlocked
     * @todo   Implement testGetBlocked().
     */
    public function testGetBlocked()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::setAuthorNames
     * @todo   Implement testSetAuthorNames().
     */
    public function testSetAuthorNames()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::setPassword
     * @todo   Implement testSetPassword().
     */
    public function testSetPassword()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::setBlocked
     * @todo   Implement testSetBlocked().
     */
    public function testSetBlocked()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::isAnonymous
     * @todo   Implement testIsAnonymous().
     */
    public function testIsAnonymous()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::isAwaitingApproval
     * @todo   Implement testIsAwaitingApproval().
     */
    public function testIsAwaitingApproval()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::isRegistered
     * @todo   Implement testIsRegistered().
     */
    public function testIsRegistered()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::isModerator
     * @todo   Implement testIsModerator().
     */
    public function testIsModerator()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::isAdministrator
     * @todo   Implement testIsAdministrator().
     */
    public function testIsAdministrator()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::canCreateEpisode
     * @todo   Implement testCanCreateEpisode().
     */
    public function testCanCreateEpisode()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::canCreateComment
     * @todo   Implement testCanCreateComment().
     */
    public function testCanCreateComment()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers addventure\User::canSubscribe
     * @todo   Implement testCanSubscribe().
     */
    public function testCanSubscribe()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

}
